Audio and full text version is available advertisement free at: https://catpea.com or visit https://github.com/catpea/ for source-code
--------------------------------------------------------------------------------

Programming Is Not Hard; You Just Need Real Context (I am still recording audio)
Tuesday • April 18th 2023 • 11:23:00 pm

Allow me to explain to you completely and in context,
what relational databases are, and how they work.

---

You might have already heard that databases are like spreadsheets,
they have rows and columns, but that is all you should visualize, rows and columns.

Spreadsheets emphasize cells and have formulas like SUM,
that can dynamically generate cell values.

Database tables, focus on relationships with other tables,
to establish a relationship two tables will share data.

Each table will have a column with the same information,
so that you can say join those two tables on that column.

This is a different trick than dynamically calculated cells in spreadsheets,
but the underlying data structure is the same a grid, rows, columns cells or fields.

---

Here is where ineffective education fails,
because the next thing textbooks talk about is the different types of joins.

But there is only one type of join that you should ever remember,
the LEFT JOIN, or the one to many relationship.

Now before we go any further, we need to understand what we are doing,
this is again where schools fail.

You cannot understand databases, without a reason, a picture,
an idea, and our idea here is to create an internet version of a music player with multiple users.

---

The first thing we must do, is create a starting point,
and that is the notion of accounts, it is the main database table.

The only thing this table really holds is a userID,
just in case you ever want to support multiple logins per account.

Gmail has a feature, where you can combine inboxes,
that is how a singe account would envelop multiple users.

If we were just to run a LEFT JOIN or establish one to many relationship here,
we would get multiple rows for the same account, with different users.

If you had one account with two users, you would get back, two rows,
they would have the same account number but different user information.

---

Our professor, wold have a huge-problem with this setup,
because the concept of database referential integrity states.

That if you just have one user per account,
then you need a one to one relationship.

And that would be pretty cute,
but nobody has time for that.

We just use a left join everywhere,
this way, we create a con...

----- snip ----- (Sorry, 5,000 letter limit in summaries see catpea.com or visit https://github.com/catpea/ for source-code) ----- snip -----

...e password matches, during login.

You encrypt the password user is sending again,
and compare if the encrypted strings match.

---

These functions become your automatic API,
when you wrap them in a JavaScript Object Proxy.

An object proxy gives you the ability to intercept the call to the API,
and either say that function does not exist, or execute it if it does.

To create the API object that you apply the proxy to,
you just use a spread operator on the objects returned by “import * as playlist from playlist.js”

In this case the playlist object,
it is now assigned to you api, and you API object now features all the funcions you marked for export in playlist.js.

And here, you create a web socket and http endpoints,
that use application/json and thus can contian information like funcionName and functionArguments, along with Authentication.

At first you present only signIn and signUp,
but you always check for authentication property on the incoming object.

Becasue once auithenticated, you than apply all the otherfuncions to the API,
like uploadSong, or createPlaylist.

When executing signIn, you will actually authenticate twice,
do not optimize that, hoisting your API from anonymous to logged in.

And then performing signIn tasks, are two different things,
this grants you the ability to execute addPlaylist from caommand line for exmple.

Without ever eve needing to sign in, there are different ways to acces your API,
and to account for all of them, you kind of authenticate twice when signingIn.

Rule braking, makes your programs consistent,
and powerful.

---

Now you expose your API object as WebSocket, then via HTTP/S route,
you should call it v1, as in API version 1.

And use the npm commander module, to expose your API,
on the command line as well, just in case you ever need it.

You don’t have to put authentication information int every command,
just set it as an environment variable or a dot file.

Now you are done, you have a headless API server,
and you grab Svelte and Bootstrap, create a UI, and use HTTP/S or web sockets.

To call those neatly named api funcions singUp, signIn, addSong,
which trigger one or more queries on your database…

And return the table data,
that you then use in your interface.
